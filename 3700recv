#!/usr/bin/env python3
#
# CS3700, Fall 2021
# Gabe Holmes
# Project 4 Reliable Transport Protocol


import datetime
import json
import sys
import socket

from base64 import b64decode


def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " 3700recv: " + string + "\n")

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = int(sys.argv[1])

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

# List of sequence numbers, if the same sequence number is seen more than once
# we can ignore all but the first instance. Also used for reordering
seq_list = []

# Dict from SEQ number to packet
packet_wklist = {}

SEQ = 'sequence'

received_eof = False
def get_target_seq_num(currentPacket):
  if len(seq_list) == 0:
    return 0
  else:
    return seq_list[-1] + len(currentPacket['data'])

# Now listen for packets
while True:
  result = sock.recvfrom(MSG_SIZE)
  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data.decode())

      # If the EOF flag is set, exit
      if (decoded['eof']):
        received_eof = True

      # If there is data, we accept it and print it out
      if (decoded['data']) and not received_eof:
        seq_num = decoded[SEQ] # The sequence number of this current packet
        target_seq_num = get_target_seq_num(decoded) # The sequence number of the next in order packet

        data = b64decode(decoded['data'].encode())
        # If we receive data, we assume it's in-order
        # You will need to do much more here

        if target_seq_num != seq_num:
          # The current packet does not have the correct sequence number
          packet_wklist[seq_num] = decoded
        # Check if we already received a packet with the correct sequence number
        if (seq_num in packet_wklist and seq_num not in seq_list) \
                or (target_seq_num == seq_num and seq_num not in seq_list):
          log("[recv data] " + str(seq_num) + " (" + str(len(data)) + ") ACCEPTED (in-order)")
          sys.stdout.buffer.write(data)
          seq_list.append(seq_num)
        else:
          log("Received packet with duplicate SEQUENCE number (" + str(seq_num) + "), ignoring")

      # Send back an ack to the sender
      msg = json.dumps({"ack": decoded['sequence'] + len(data), "eofAck": received_eof})
      log("ABOUT TO SEND " + msg)
      sent = sock.sendto(msg.encode(), addr)
      log("[sent] " + str(sent))
      if sent < len(msg):
        log("[error] unable to fully send packet")
      if received_eof:
        sock.sendto(msg.encode(), addr)
        log("SENT EOF ACK, EXITING")
        sys.exit(0)
    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
